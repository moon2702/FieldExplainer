# Makefile

# UNAME_S := $(shell uname -s)

ifeq ($(OS),Windows_NT)
	CMAKE_OPTION = -G "MinGW Makefiles"
else
	CMAKE_OPTION =
endif

# 默认目标
.PHONY: default
default: all

# 使用 cmake 构建项目
.PHONY: build
build:
	@echo "Running CMake build ..."
	@mkdir -p build
	@cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=1 -S . -B build ${CMAKE_OPTION}
	@mv build/compile_commands.json ./

# 清除 cmake 生成的构建文件
.PHONY: unb
unb:
	@echo "cleaning CMake build files ..."
	@rm -rf ./build ./bin
	@echo "CMake build succeed!"

# 使用 make 编译项目
.PHONY: all
all: build
	@echo "Running make to compile the project ..."
#	@+$(MAKE) -C build -s -j$(nproc)
	@+cmake --build build --config Release -j$(nproc)

# 清除使用 make 编译生成的文件
.PHONY: clean
clean:
	@echo "Running make clean ..."
	@+$(MAKE) -C build clean -s
	@rm -rf ./bin
	@echo "Make clean succeed!"

# 显示目录结构
.PHONY: code
code:
	@tree -f --dirsfirst -I "build|bin|makefile|resource|cmake"

.PHONY: format
format:
	@echo "Running clang-format to format the code ..."
	@find ./src/ -name "*.cpp" -o -name "*.c" | xargs clang-format -i
	@find ./include/ -name "*.h" -o -name "*.hpp" | xargs clang-format -i
	@echo "clang-format succeed!"

# 显示帮助信息
.PHONY: help
help:
	@echo "功能列表"
	@echo "Usage: make {all|clean|cmake|unb|add_class|code|format}"
	@echo "all        - Compile the project using make | 编译项目"
	@echo "clean      - Clean files generated by make | 清除编译生成的可执行文件"
	@echo "build      - Use CMake to generate build files | cmake构建项目 | 基于CMake"
	@echo "unb        - Remove CMake-generated build files | 清除cmake构建的文件"
	@echo "code       - show directory structure | 显示目录结构 | 基于tree"
	@echo "format     - use clang-format to format the code | 使用clang-format格式化代码 | 基于clang-format"

# apt install tree clang-format # tree 和 clang-format 工具
# apt install graphviz openjdk-21-jdk # PUML 和 JAVA 环境
